require('dotenv').config();
const { Telegraf, Markup } = require('telegraf');
const { Coordinates, CalculationMethod, PrayerTimes } = require('adhan');
const fs = require('fs');
const path = require('path');

const bot = new Telegraf(process.env.BOT_TOKEN);
const WEB_APP_URL = process.env.WEB_APP_URL;

// –ü—É—Ç—å –∫ —Ñ–∞–π–ª—É —Å –ø–æ–¥–ø–∏—Å–∫–∞–º–∏
const SUBSCRIPTIONS_FILE = path.join(__dirname, 'subscriptions.json');
const NOTIFIED_FILE = path.join(__dirname, 'notified.json');

// –•—Ä–∞–Ω–∏–ª–∏—â–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
const userSubscriptions = new Map();
const notifiedPrayers = new Set();

// –ó–∞–≥—Ä—É–∑–∫–∞ –ø–æ–¥–ø–∏—Å–æ–∫ –∏–∑ —Ñ–∞–π–ª–∞
function loadSubscriptions() {
  try {
    if (fs.existsSync(SUBSCRIPTIONS_FILE)) {
      const data = fs.readFileSync(SUBSCRIPTIONS_FILE, 'utf8');
      const subscriptions = JSON.parse(data);

      subscriptions.forEach(sub => {
        userSubscriptions.set(sub.userId, sub);
      });

      console.log(`‚úÖ Loaded ${userSubscriptions.size} subscriptions from file`);
    } else {
      console.log('üìÅ No subscriptions file found, starting fresh');
    }
  } catch (error) {
    console.error('‚ùå Error loading subscriptions:', error);
  }
}

// –ó–∞–≥—Ä—É–∑–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –∏–∑ —Ñ–∞–π–ª–∞
function loadNotifiedPrayers() {
  try {
    if (fs.existsSync(NOTIFIED_FILE)) {
      const data = fs.readFileSync(NOTIFIED_FILE, 'utf8');
      const notified = JSON.parse(data);

      notified.forEach(key => {
        notifiedPrayers.add(key);
      });

      console.log(`‚úÖ Loaded ${notifiedPrayers.size} notification records`);
    }
  } catch (error) {
    console.error('‚ùå Error loading notified prayers:', error);
  }
}

// –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –ø–æ–¥–ø–∏—Å–æ–∫ –≤ —Ñ–∞–π–ª
function saveSubscriptions() {
  try {
    const subscriptions = Array.from(userSubscriptions.values());
    fs.writeFileSync(SUBSCRIPTIONS_FILE, JSON.stringify(subscriptions, null, 2), 'utf8');
    console.log(`üíæ Saved ${subscriptions.length} subscriptions to file`);
  } catch (error) {
    console.error('‚ùå Error saving subscriptions:', error);
  }
}

// –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –≤ —Ñ–∞–π–ª
function saveNotifiedPrayers() {
  try {
    const notified = Array.from(notifiedPrayers);
    fs.writeFileSync(NOTIFIED_FILE, JSON.stringify(notified, null, 2), 'utf8');
  } catch (error) {
    console.error('‚ùå Error saving notified prayers:', error);
  }
}

// –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–∞—Ä—Å–∏–Ω–≥–∞ –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ (3:45 -> 225 —Å–µ–∫—É–Ω–¥)
function parseDuration(durationStr) {
  if (!durationStr) return 0;
  const parts = durationStr.split(':');
  if (parts.length === 2) {
    return parseInt(parts[0]) * 60 + parseInt(parts[1]);
  }
  return 0;
}

// Middleware –¥–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
bot.use((ctx, next) => {
  console.log(`${new Date().toISOString()} - ${ctx.updateType} from ${ctx.from?.username || ctx.from?.first_name}`);
  return next();
});

// –ö–æ–º–∞–Ω–¥–∞ /start
bot.start(async (ctx) => {
  const firstName = ctx.from.first_name || '–î—Ä—É–≥';

  // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø–æ–¥–ø–∏—Å—ã–≤–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –º–æ–ª–∏—Ç–≤–∞—Ö
  subscribeUser(ctx.from.id);
  saveSubscriptions();

  // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä start (Deep Link)
  const startPayload = ctx.startPayload;
  console.log(`[/start] Received from user ${ctx.from.id} (${ctx.from.username || ctx.from.first_name})`);
  console.log(`[/start] Start payload:`, startPayload);

  // –ï—Å–ª–∏ —ç—Ç–æ –∑–∞–ø—Ä–æ—Å –Ω–∞ —Å–∫–∞—á–∏–≤–∞–Ω–∏–µ –∫–Ω–∏–≥–∏
  if (startPayload && startPayload.startsWith('download_book_')) {
    const bookId = parseInt(startPayload.replace('download_book_', ''));
    console.log(`[/start] User ${ctx.from.id} requested book ${bookId}`);

    // –ú–æ–∫–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –∫–Ω–∏–≥ (–≤ –ø—Ä–æ–¥–∞–∫—à–µ–Ω–µ –∑–∞–≥—Ä—É–∂–∞—Ç—å –∏–∑ –ë–î)
    const mockBooks = [
      {
        id: 1,
        title: "–°–≤—è—â–µ–Ω–Ω—ã–π –ö–æ—Ä–∞–Ω",
        author: "–ü–µ—Ä–µ–≤–æ–¥ —Å–º—ã—Å–ª–æ–≤",
        content: "# –°–≤—è—â–µ–Ω–Ω—ã–π –ö–æ—Ä–∞–Ω\n\n–ü–µ—Ä–µ–≤–æ–¥ —Å–º—ã—Å–ª–æ–≤ –°–≤—è—â–µ–Ω–Ω–æ–≥–æ –ö–æ—Ä–∞–Ω–∞...\n\n## –°—É—Ä–∞ –ê–ª—å-–§–∞—Ç–∏—Ö–∞\n\n1. –í–æ –∏–º—è –ê–ª–ª–∞—Ö–∞, –ú–∏–ª–æ—Å—Ç–∏–≤–æ–≥–æ, –ú–∏–ª–æ—Å–µ—Ä–¥–Ω–æ–≥–æ...",
        description: "–ü–æ–ª–Ω—ã–π –ø–µ—Ä–µ–≤–æ–¥ —Å–º—ã—Å–ª–æ–≤ –°–≤—è—â–µ–Ω–Ω–æ–≥–æ –ö–æ—Ä–∞–Ω–∞"
      },
      {
        id: 2,
        title: "40 —Ö–∞–¥–∏—Å–æ–≤ –ò–º–∞–º–∞ –∞–Ω-–ù–∞–≤–∞–≤–∏",
        author: "–ò–º–∞–º –∞–Ω-–ù–∞–≤–∞–≤–∏",
        content: "# 40 —Ö–∞–¥–∏—Å–æ–≤ –ò–º–∞–º–∞ –∞–Ω-–ù–∞–≤–∞–≤–∏\n\n–°–±–æ—Ä–Ω–∏–∫ –≤–∞–∂–Ω–µ–π—à–∏—Ö —Ö–∞–¥–∏—Å–æ–≤...",
        description: "–ö–ª–∞—Å—Å–∏—á–µ—Å–∫–∏–π —Å–±–æ—Ä–Ω–∏–∫ —Ö–∞–¥–∏—Å–æ–≤"
      },
      {
        id: 3,
        title: "–†–∏—è–¥ –∞—Å-–°–∞–ª–∏—Ö–∏–Ω",
        author: "–ò–º–∞–º –∞–Ω-–ù–∞–≤–∞–≤–∏",
        content: "# –†–∏—è–¥ –∞—Å-–°–∞–ª–∏—Ö–∏–Ω\n\n–°–∞–¥—ã –ø—Ä–∞–≤–µ–¥–Ω—ã—Ö...",
        description: "–°–±–æ—Ä–Ω–∏–∫ —Ö–∞–¥–∏—Å–æ–≤ –æ –±–ª–∞–≥–∏—Ö –¥–µ–ª–∞—Ö"
      }
    ];

    const book = mockBooks.find(b => b.id === bookId);

    if (book) {
      try {
        await ctx.reply('‚è≥ –û—Ç–ø—Ä–∞–≤–ª—è—é –∫–Ω–∏–≥—É...');

        // –°–æ–∑–¥–∞–µ–º —Ç–µ–∫—Å—Ç–æ–≤—ã–π —Ñ–∞–π–ª –∏–∑ –∫–æ–Ω—Ç–µ–Ω—Ç–∞ –∫–Ω–∏–≥–∏
        const bookContent = `${book.title}\n${'='.repeat(book.title.length)}\n\n${book.author ? `–ê–≤—Ç–æ—Ä: ${book.author}\n\n` : ''}${book.content}`;
        const buffer = Buffer.from('\uFEFF' + bookContent, 'utf-8'); // UTF-8 BOM –¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–π –∫–æ–¥–∏—Ä–æ–≤–∫–∏

        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –¥–æ–∫—É–º–µ–Ω—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
        await ctx.replyWithDocument(
          {
            source: buffer,
            filename: `${book.title}.txt`
          },
          {
            caption: `üìñ *${book.title}*${book.author ? `\nüë§ ${book.author}` : ''}\n\n_–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –∏–∑ MubarakWay_`,
            parse_mode: 'Markdown'
          }
        );

        await ctx.reply('‚úÖ –ö–Ω–∏–≥–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞ –≤ —á–∞—Ç–µ! –ú–æ–∂–µ—Ç–µ —á–∏—Ç–∞—Ç—å –≤ –ª—é–±–æ–µ –≤—Ä–µ–º—è üìö');
        return;
      } catch (error) {
        console.error('Error sending book:', error);
        await ctx.reply('‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –∫–Ω–∏–≥–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
      }
    } else {
      await ctx.reply('‚ùå –ö–Ω–∏–≥–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –≤—ã–±—Ä–∞—Ç—å –¥—Ä—É–≥—É—é.');
    }

    return;
  }

  // –ï—Å–ª–∏ —ç—Ç–æ –∑–∞–ø—Ä–æ—Å –Ω–∞ —Å–∫–∞—á–∏–≤–∞–Ω–∏–µ –Ω–∞—à–∏–¥–∞
  if (startPayload && startPayload.startsWith('download_')) {
    const nashidId = parseInt(startPayload.replace('download_', ''));
    console.log(`[/start] User ${ctx.from.id} requested nashid ${nashidId}`);

    // –ù–∞—Ö–æ–¥–∏–º –Ω–∞—à–∏–¥ –ø–æ ID (–∑–¥–µ—Å—å –Ω—É–∂–Ω–∞ –±–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –∏–ª–∏ API, –Ω–æ –ø–æ–∫–∞ –∏—Å–ø–æ–ª—å–∑—É–µ–º –º–æ–∫–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ)
    const mockNashids = [
      {
        id: 1,
        title: "Ÿäÿß ŸÇŸÑÿ® ŸÖŸÜ ÿ≠ÿØŸäÿØ",
        titleTransliteration: "Ya Qalb Min Hadid",
        artist: "Fadil Muhammad",
        duration: "3:45",
        audioUrl: "/audio/Nasheed_Azan_1.mp3"
      },
      {
        id: 2,
        title: "ÿ≥ŸàŸÅ ÿ£ÿπŸàÿØ Ÿäÿß ÿ£ŸÖŸä",
        titleTransliteration: "Sauf A'ood Ya Ommi",
        artist: "Al-Baraah Group",
        duration: "4:20",
        audioUrl: "/audio/Nasheed_Azan_1.mp3"
      },
      {
        id: 3,
        title: "ÿ±ÿ≠ÿ® ÿ®ÿ∞Ÿá ÿßŸÑŸÜÿπŸÖŸá",
        titleTransliteration: "Rahib Bidhihi An-Ni'mah",
        artist: "Hamzah Adel",
        duration: "2:58",
        audioUrl: "/audio/Nasheed_Azan_1.mp3"
      },
      {
        id: 4,
        title: "Tala'al Badru 'Alayna",
        titleTransliteration: "Tala'al Badru 'Alayna",
        artist: "Zain",
        duration: "5:12",
        audioUrl: "/audio/Nasheed_Azan_1.mp3"
      },
      {
        id: 5,
        title: "ÿßŸÑÿ∑ÿ±ŸäŸÇ ÿ•ŸÑŸâ ÿßŸÑÿ¨ŸÜÿ©",
        titleTransliteration: "At-Tariq ila al-Jannah",
        artist: "Abu Ali",
        duration: "4:15",
        audioUrl: "/audio/Nasheed_Azan_1.mp3"
      },
      {
        id: 6,
        title: "ŸÑÿß ÿ•ŸÑŸá ÿ•ŸÑÿß ÿßŸÑŸÑŸá",
        titleTransliteration: "La Ilaha Illa Allah",
        artist: "Ahmad Nashid",
        duration: "3:30",
        audioUrl: "/audio/Nasheed_Azan_1.mp3"
      }
    ];

    const nashid = mockNashids.find(n => n.id === nashidId);

    if (nashid) {
      try {
        await ctx.reply('‚è≥ –û—Ç–ø—Ä–∞–≤–ª—è—é –Ω–∞—à–∏–¥...');

        // –§–æ—Ä–º–∏—Ä—É–µ–º –ø–æ–ª–Ω—ã–π URL –¥–ª—è –∞—É–¥–∏–æ—Ñ–∞–π–ª–∞
        const audioUrl = `${WEB_APP_URL}${nashid.audioUrl}`;

        console.log('Sending audio:', audioUrl);

        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∞—É–¥–∏–æ—Ñ–∞–π–ª –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
        await ctx.replyWithAudio(audioUrl, {
          title: nashid.title,
          performer: nashid.artist,
          duration: parseDuration(nashid.duration),
          caption: `üéµ *${nashid.title}*\nüë§ ${nashid.artist}\n\n_–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –∏–∑ MubarakWay_`,
          parse_mode: 'Markdown'
        });

        await ctx.reply('‚úÖ –ù–∞—à–∏–¥ —Å–æ—Ö—Ä–∞–Ω—ë–Ω –≤ —á–∞—Ç–µ! –ú–æ–∂–µ—Ç–µ —Å–ª—É—à–∞—Ç—å –ø—Ä—è–º–æ –∑–¥–µ—Å—å üéß');
        return;
      } catch (error) {
        console.error('Error sending audio:', error);
        await ctx.reply('‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –∞—É–¥–∏–æ—Ñ–∞–π–ª–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
      }
    } else {
      await ctx.reply('‚ùå –ù–∞—à–∏–¥ –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –≤—ã–±—Ä–∞—Ç—å –¥—Ä—É–≥–æ–π.');
    }

    return;
  }

  // –û–±—ã—á–Ω–æ–µ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ –ø—Ä–∏ /start –±–µ–∑ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
  const keyboard = Markup.inlineKeyboard([
    [Markup.button.webApp('üïå –û—Ç–∫—Ä—ã—Ç—å MubarakWay', WEB_APP_URL)],
    [
      Markup.button.callback('üìö –ë–∏–±–ª–∏–æ—Ç–µ–∫–∞', 'library'),
      Markup.button.callback('üéµ –ù–∞—à–∏–¥—ã', 'nashids')
    ],
    [
      Markup.button.callback('üß≠ –ö–∏–±–ª–∞', 'qibla'),
      Markup.button.callback('‚è∞ –í—Ä–µ–º—è –Ω–∞–º–∞–∑–∞', 'prayer_times')
    ],
    [Markup.button.callback('üìç –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –ª–æ–∫–∞—Ü–∏—é', 'set_location')],
    [Markup.button.callback('‚ÑπÔ∏è –û –ø—Ä–æ–µ–∫—Ç–µ', 'about')]
  ]);

  const message = `üïå *–ê—Å—Å–∞–ª–∞–º—É –∞–ª–µ–π–∫—É–º, ${firstName}!*

–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ *MubarakWay* ‚Äî –≤–∞—à –¥—É—Ö–æ–≤–Ω—ã–π –ø–æ–º–æ—â–Ω–∏–∫ –∏ –ø—É—Ç–µ–≤–æ–¥–∏—Ç–µ–ª—å –≤ –º–∏—Ä–µ –∏—Å–ª–∞–º–∞.

üåü *–ß—Ç–æ –≤–∞—Å –∂–¥–µ—Ç:*

üìö *–ë–∏–±–ª–∏–æ—Ç–µ–∫–∞* ‚Äî –∏—Å–ª–∞–º—Å–∫–∏–µ –∫–Ω–∏–≥–∏ —Å –≤—Å—Ç—Ä–æ–µ–Ω–Ω–æ–π —á–∏—Ç–∞–ª–∫–æ–π
‚Ä¢ –°–≤—è—â–µ–Ω–Ω—ã–π –ö–æ—Ä–∞–Ω —Å –ø–µ—Ä–µ–≤–æ–¥–∞–º–∏
‚Ä¢ –°–±–æ—Ä–Ω–∏–∫–∏ —Ö–∞–¥–∏—Å–æ–≤
‚Ä¢ –î—É—Ö–æ–≤–Ω–∞—è –ª–∏—Ç–µ—Ä–∞—Ç—É—Ä–∞
‚Ä¢ –í–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å —á—Ç–µ–Ω–∏—è –æ—Ñ—Ñ–ª–∞–π–Ω

üéµ *–ù–∞—à–∏–¥—ã* ‚Äî –∫–æ–ª–ª–µ–∫—Ü–∏—è —Ä–µ–ª–∏–≥–∏–æ–∑–Ω—ã—Ö –ø–µ—Å–Ω–æ–ø–µ–Ω–∏–π
‚Ä¢ –ö–ª–∞—Å—Å–∏—á–µ—Å–∫–∏–µ –∏ —Å–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–µ –Ω–∞—à–∏–¥—ã
‚Ä¢ –°–æ–∑–¥–∞–Ω–∏–µ –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã—Ö –ø–ª–µ–π–ª–∏—Å—Ç–æ–≤
‚Ä¢ –ü—Ä–æ—Å–ª—É—à–∏–≤–∞–Ω–∏–µ –±–µ–∑ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç–∞
‚Ä¢ –¢–µ–∫—Å—Ç—ã –Ω–∞ –∞—Ä–∞–±—Å–∫–æ–º –∏ —Ä—É—Å—Å–∫–æ–º

üß≠ *–û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –∫–∏–±–ª—ã*
‚Ä¢ –¢–æ—á–Ω–æ–µ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –Ω–∞ –ú–µ–∫–∫—É
‚Ä¢ –ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–π –∫–æ–º–ø–∞—Å
‚Ä¢ –†–∞–±–æ—Ç–∞–µ—Ç –≤ –ª—é–±–æ–π —Ç–æ—á–∫–µ –º–∏—Ä–∞

‚è∞ *–í—Ä–µ–º—è –º–æ–ª–∏—Ç–≤*
‚Ä¢ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π —Ä–∞—Å—á–µ—Ç –ø–æ –≤–∞—à–µ–π –ª–æ–∫–∞—Ü–∏–∏
‚Ä¢ –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –æ –Ω–∞—á–∞–ª–µ –Ω–∞–º–∞–∑–∞
‚Ä¢ –•–∏–¥–∂—Ä–∏–π—Å–∫–∏–π –∫–∞–ª–µ–Ω–¥–∞—Ä—å

üíé *–û—Å–æ–±–µ–Ω–Ω–æ—Å—Ç–∏:*
‚úÖ –ü–æ–ª–Ω–æ—Å—Ç—å—é –±–µ—Å–ø–ª–∞—Ç–Ω–æ–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ
‚úÖ –†–∞–±–æ—Ç–∞–µ—Ç –±–µ–∑ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç–∞
‚úÖ –ü–æ–¥–¥–µ—Ä–∂–∫–∞ –∞—Ä–∞–±—Å–∫–æ–≥–æ —è–∑—ã–∫–∞
‚úÖ –ö—Ä–∞—Å–∏–≤—ã–π –∏ –ø–æ–Ω—è—Ç–Ω—ã–π –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å

–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –¥—É—Ö–æ–≤–Ω–æ–µ –ø—É—Ç–µ—à–µ—Å—Ç–≤–∏–µ! üöÄ

*Barakallahu feeki!* ü§≤`;

  ctx.replyWithMarkdown(message, keyboard);
});

// –û–±—Ä–∞–±–æ—Ç–∫–∞ inline –∫–Ω–æ–ø–æ–∫
bot.action('library', (ctx) => {
  ctx.answerCbQuery();
  ctx.replyWithMarkdown(
    'üìö *–ë–∏–±–ª–∏–æ—Ç–µ–∫–∞ –∏—Å–ª–∞–º—Å–∫–æ–π –ª–∏—Ç–µ—Ä–∞—Ç—É—Ä—ã*\n\n–û—Ç–∫—Ä–æ–π—Ç–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –¥–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ –¥—É—Ö–æ–≤–Ω—ã–º –∫–Ω–∏–≥–∞–º –∏ —Ç—Ä–∞–∫—Ç–∞—Ç–∞–º.',
    Markup.inlineKeyboard([
      [Markup.button.webApp('üìñ –û—Ç–∫—Ä—ã—Ç—å –±–∏–±–ª–∏–æ—Ç–µ–∫—É', `${WEB_APP_URL}/library`)]
    ])
  );
});

bot.action('nashids', (ctx) => {
  ctx.answerCbQuery();
  ctx.replyWithMarkdown(
    'üéµ *–ö–æ–ª–ª–µ–∫—Ü–∏—è –Ω–∞—à–∏–¥–æ–≤*\n\n–°–ª—É—à–∞–π—Ç–µ —Ä–µ–ª–∏–≥–∏–æ–∑–Ω—ã–µ –ø–µ—Å–Ω–æ–ø–µ–Ω–∏—è –∏ —Å–æ–∑–¥–∞–≤–∞–π—Ç–µ –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–µ –ø–ª–µ–π–ª–∏—Å—Ç—ã.',
    Markup.inlineKeyboard([
      [Markup.button.webApp('üé∂ –°–ª—É—à–∞—Ç—å –Ω–∞—à–∏–¥—ã', `${WEB_APP_URL}/nashids`)]
    ])
  );
});

bot.action('qibla', (ctx) => {
  ctx.answerCbQuery();
  ctx.replyWithMarkdown(
    'üß≠ *–ù–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–∏–±–ª—ã*\n\n–û–ø—Ä–µ–¥–µ–ª–∏—Ç–µ —Ç–æ—á–Ω–æ–µ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –Ω–∞ –ú–µ–∫–∫—É —Å –ø–æ–º–æ—â—å—é –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–æ–≥–æ –∫–æ–º–ø–∞—Å–∞.',
    Markup.inlineKeyboard([
      [Markup.button.webApp('üïã –ù–∞–π—Ç–∏ –∫–∏–±–ª—É', `${WEB_APP_URL}/qibla`)]
    ])
  );
});

bot.action('prayer_times', (ctx) => {
  ctx.answerCbQuery();
  ctx.replyWithMarkdown(
    '‚è∞ *–í—Ä–µ–º—è –º–æ–ª–∏—Ç–≤*\n\n–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π —Ä–∞—Å—á–µ—Ç –≤—Ä–µ–º–µ–Ω–∏ –Ω–∞–º–∞–∑–∞ –ø–æ –≤–∞—à–µ–º—É –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏—é.',
    Markup.inlineKeyboard([
      [Markup.button.webApp('üïê –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –≤—Ä–µ–º—è', `${WEB_APP_URL}/qibla`)]
    ])
  );
});

bot.action('about', (ctx) => {
  ctx.answerCbQuery();
  ctx.replyWithMarkdown(
    `üåü *–û –ø—Ä–æ–µ–∫—Ç–µ MubarakWay*

*MubarakWay* ‚Äî —ç—Ç–æ –∫–æ–º–ø–ª–µ–∫—Å–Ω–æ–µ –∏—Å–ª–∞–º—Å–∫–æ–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ, —Å–æ–∑–¥–∞–Ω–Ω–æ–µ –¥–ª—è –ø–æ–¥–¥–µ—Ä–∂–∫–∏ –º—É—Å—É–ª—å–º–∞–Ω –≤ –∏—Ö –¥—É—Ö–æ–≤–Ω–æ–π –ø—Ä–∞–∫—Ç–∏–∫–µ.

üë®‚Äçüíª *–†–∞–∑—Ä–∞–±–æ—Ç–∞–Ω–æ —Å –ª—é–±–æ–≤—å—é*
–ü—Ä–æ–µ–∫—Ç —Å–æ–∑–¥–∞–Ω –∫–æ–º–∞–Ω–¥–æ–π —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤-–º—É—Å—É–ª—å–º–∞–Ω –¥–ª—è –≤—Å–µ–π —É–º–º—ã.

üÜì *–ü–æ–ª–Ω–æ—Å—Ç—å—é –±–µ—Å–ø–ª–∞—Ç–Ω–æ*
–í—Å–µ —Ñ—É–Ω–∫—Ü–∏–∏ –¥–æ—Å—Ç—É–ø–Ω—ã –±–µ–∑ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π.

üîí *–ë–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å*
–í–∞—à–∏ –¥–∞–Ω–Ω—ã–µ –∑–∞—â–∏—â–µ–Ω—ã –∏ –Ω–µ –ø–µ—Ä–µ–¥–∞—é—Ç—Å—è —Ç—Ä–µ—Ç—å–∏–º –ª–∏—Ü–∞–º.

üìß *–ü–æ–¥–¥–µ—Ä–∂–∫–∞*
–ü–æ –≤–æ–ø—Ä–æ—Å–∞–º –æ–±—Ä–∞—â–∞–π—Ç–µ—Å—å: support@mubarakway.com

*–î–∞ –±–ª–∞–≥–æ—Å–ª–æ–≤–∏—Ç –ê–ª–ª–∞—Ö –≤—Å–µ—Ö, –∫—Ç–æ –ø–æ–ª—å–∑—É–µ—Ç—Å—è —ç—Ç–∏–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ–º!* ü§≤

_–í–µ—Ä—Å–∏—è: 1.0.0_`,
    Markup.inlineKeyboard([
      [Markup.button.webApp('üöÄ –û—Ç–∫—Ä—ã—Ç—å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ', WEB_APP_URL)]
    ])
  );
});

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –ª–æ–∫–∞—Ü–∏–∏
bot.action('set_location', (ctx) => {
  ctx.answerCbQuery();
  ctx.replyWithMarkdown(
    `üìç *–£—Å—Ç–∞–Ω–æ–≤–∫–∞ –≤–∞—à–µ–π –ª–æ–∫–∞—Ü–∏–∏*

–î–ª—è —Ç–æ—á–Ω–æ–≥–æ —Ä–∞—Å—á–µ—Ç–∞ –≤—Ä–µ–º–µ–Ω–∏ –º–æ–ª–∏—Ç–≤ –Ω–∞–º –Ω—É–∂–Ω–∞ –≤–∞—à–∞ –≥–µ–æ–ª–æ–∫–∞—Ü–∏—è.

–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã –ø–æ–¥–µ–ª–∏—Ç—å—Å—è —Å–≤–æ–∏–º –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ–º üëá`,
    Markup.keyboard([
      [Markup.button.locationRequest('üìç –û—Ç–ø—Ä–∞–≤–∏—Ç—å –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ')]
    ]).resize().oneTime()
  );
});

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–æ–ª—É—á–µ–Ω–∏—è –ª–æ–∫–∞—Ü–∏–∏
bot.on('location', async (ctx) => {
  const { latitude, longitude } = ctx.message.location;
  const userId = ctx.from.id;

  console.log(`üìç Received location from user ${userId}: ${latitude}, ${longitude}`);

  // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —á–∞—Å–æ–≤–æ–π –ø–æ—è—Å (–ø—Ä–∏–º–µ—Ä–Ω–æ, –ø–æ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞–º)
  // –í –∏–¥–µ–∞–ª–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å API –¥–ª—è —Ç–æ—á–Ω–æ–≥–æ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è, –Ω–æ –¥–ª—è –ø—Ä–æ—Å—Ç–æ—Ç—ã –∏—Å–ø–æ–ª—å–∑—É–µ–º UTC offset
  const timezone = getTimezoneFromCoordinates(latitude, longitude);

  // –û–±–Ω–æ–≤–ª—è–µ–º –ø–æ–¥–ø–∏—Å–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
  subscribeUser(userId, { latitude, longitude }, timezone);
  saveSubscriptions();

  // –í—ã—á–∏—Å–ª—è–µ–º –≤—Ä–µ–º—è –º–æ–ª–∏—Ç–≤ –¥–ª—è –Ω–æ–≤–æ–π –ª–æ–∫–∞—Ü–∏–∏
  const prayerTimes = calculatePrayerTimes({ latitude, longitude });

  if (prayerTimes) {
    const { currentPrayer, nextPrayer } = getCurrentAndNextPrayer(prayerTimes);

    await ctx.replyWithMarkdown(
      `‚úÖ *–õ–æ–∫–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞!*

üìç –ö–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã: ${latitude.toFixed(4)}, ${longitude.toFixed(4)}
üåç –ß–∞—Å–æ–≤–æ–π –ø–æ—è—Å: ${timezone}

‚è∞ *–í—Ä–µ–º—è –º–æ–ª–∏—Ç–≤ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è:*

üåÖ –§–∞–¥–∂—Ä: ${formatTime(prayerTimes.fajr, timezone)}
üåÑ –í–æ—Å—Ö–æ–¥: ${formatTime(prayerTimes.sunrise, timezone)}
‚òÄÔ∏è –ó—É—Ö—Ä: ${formatTime(prayerTimes.dhuhr, timezone)}
üå§Ô∏è –ê—Å—Ä: ${formatTime(prayerTimes.asr, timezone)}
üåÜ –ú–∞–≥—Ä–∏–±: ${formatTime(prayerTimes.maghrib, timezone)}
üåô –ò—à–∞: ${formatTime(prayerTimes.isha, timezone)}

${nextPrayer ? `\nüìø –°–ª–µ–¥—É—é—â–∞—è –º–æ–ª–∏—Ç–≤–∞: *${nextPrayer.name}* –≤ ${formatTime(nextPrayer.time, timezone)}` : ''}

üîî –í—ã –±—É–¥–µ—Ç–µ –ø–æ–ª—É—á–∞—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –≤—Ä–µ–º–µ–Ω–∏ –º–æ–ª–∏—Ç–≤!`,
      Markup.removeKeyboard()
    );
  } else {
    await ctx.reply('‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å—Å—á–∏—Ç–∞—Ç—å –≤—Ä–µ–º—è –º–æ–ª–∏—Ç–≤. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.', Markup.removeKeyboard());
  }
});

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —á–∞—Å–æ–≤–æ–≥–æ –ø–æ—è—Å–∞ –ø–æ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞–º (—É–ø—Ä–æ—â–µ–Ω–Ω–∞—è)
function getTimezoneFromCoordinates(lat, lon) {
  // –£–ø—Ä–æ—â–µ–Ω–Ω—ã–π –º–µ—Ç–æ–¥: –æ–ø—Ä–µ–¥–µ–ª—è–µ–º –ø–æ –¥–æ–ª–≥–æ—Ç–µ
  // –î–ª—è —Ç–æ—á–Ω–æ—Å—Ç–∏ –Ω—É–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å API (–Ω–∞–ø—Ä–∏–º–µ—Ä, Google Time Zone API)
  const offset = Math.round(lon / 15);

  // –ü–æ–ø—É–ª—è—Ä–Ω—ã–µ –≥–æ—Ä–æ–¥–∞ –∏ –∏—Ö —á–∞—Å–æ–≤—ã–µ –ø–æ—è—Å–∞
  const timezones = {
    'Europe/Moscow': { lat: [50, 60], lon: [30, 50] },
    'Asia/Tashkent': { lat: [38, 45], lon: [60, 75] },
    'Asia/Almaty': { lat: [42, 55], lon: [65, 85] },
    'Europe/Istanbul': { lat: [38, 42], lon: [26, 45] },
    'Asia/Dubai': { lat: [22, 27], lon: [50, 58] },
    'Asia/Riyadh': { lat: [16, 32], lon: [34, 56] },
    'Europe/London': { lat: [50, 60], lon: [-8, 2] },
    'Europe/Paris': { lat: [42, 52], lon: [-5, 10] },
    'Europe/Berlin': { lat: [47, 55], lon: [6, 15] },
    'Asia/Jakarta': { lat: [-8, 6], lon: [95, 141] },
    'Asia/Karachi': { lat: [23, 37], lon: [60, 78] },
  };

  // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –ø–æ–ø–∞–¥–∞–µ—Ç –ª–∏ –≤ –æ–¥–∏–Ω –∏–∑ —Ä–µ–≥–∏–æ–Ω–æ–≤
  for (const [tz, bounds] of Object.entries(timezones)) {
    if (lat >= bounds.lat[0] && lat <= bounds.lat[1] &&
        lon >= bounds.lon[0] && lon <= bounds.lon[1]) {
      return tz;
    }
  }

  // –ï—Å–ª–∏ –Ω–µ –Ω–∞—à–ª–∏ —Ç–æ—á–Ω–æ–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ, –∏—Å–ø–æ–ª—å–∑—É–µ–º UTC offset
  return offset >= 0 ? `Etc/GMT-${offset}` : `Etc/GMT+${Math.abs(offset)}`;
}

// –¢–µ–∫—Å—Ç–æ–≤—ã–µ –∫–æ–º–∞–Ω–¥—ã
bot.command('library', (ctx) => {
  ctx.replyWithMarkdown(
    'üìö *–ë–∏–±–ª–∏–æ—Ç–µ–∫–∞ –∏—Å–ª–∞–º—Å–∫–∏—Ö –∫–Ω–∏–≥*',
    Markup.inlineKeyboard([
      [Markup.button.webApp('üìñ –û—Ç–∫—Ä—ã—Ç—å', `${WEB_APP_URL}/library`)]
    ])
  );
});

bot.command('nashids', (ctx) => {
  ctx.replyWithMarkdown(
    'üéµ *–ù–∞—à–∏–¥—ã –∏ –¥—É—Ö–æ–≤–Ω–∞—è –º—É–∑—ã–∫–∞*',
    Markup.inlineKeyboard([
      [Markup.button.webApp('üé∂ –°–ª—É—à–∞—Ç—å', `${WEB_APP_URL}/nashids`)]
    ])
  );
});

bot.command('qibla', (ctx) => {
  ctx.replyWithMarkdown(
    'üß≠ *–û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∫–∏–±–ª—ã*',
    Markup.inlineKeyboard([
      [Markup.button.webApp('üïã –ù–∞–π—Ç–∏ –∫–∏–±–ª—É', `${WEB_APP_URL}/qibla`)]
    ])
  );
});

bot.command('help', (ctx) => {
  ctx.replyWithMarkdown(`üÜò *–ü–æ–º–æ—â—å –ø–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é*

*–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:*
/start - –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
/library - –ë–∏–±–ª–∏–æ—Ç–µ–∫–∞ –∫–Ω–∏–≥
/nashids - –ö–æ–ª–ª–µ–∫—Ü–∏—è –Ω–∞—à–∏–¥–æ–≤
/qibla - –ù–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–∏–±–ª—ã
/help - –≠—Ç–∞ —Å–ø—Ä–∞–≤–∫–∞

*–ö–∞–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è:*
1Ô∏è‚É£ –ù–∞–∂–º–∏—Ç–µ –Ω–∞ –ª—é–±—É—é –∫–Ω–æ–ø–∫—É –º–µ–Ω—é
2Ô∏è‚É£ –û—Ç–∫—Ä–æ–µ—Ç—Å—è –º–∏–Ω–∏-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
3Ô∏è‚É£ –ù–∞—Å–ª–∞–∂–¥–∞–π—Ç–µ—Å—å –¥—É—Ö–æ–≤–Ω—ã–º –∫–æ–Ω—Ç–µ–Ω—Ç–æ–º!

*–ü—Ä–æ–±–ª–µ–º—ã?*
–ù–∞–ø–∏—à–∏—Ç–µ –Ω–∞–º: support@mubarakway.com`);
});

// Note: web_app_data –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ —É–±—Ä–∞–Ω - –∏—Å–ø–æ–ª—å–∑—É–µ–º Deep Links –≤–º–µ—Å—Ç–æ —ç—Ç–æ–≥–æ

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –ª—é–±–æ–≥–æ —Ç–µ–∫—Å—Ç–∞
bot.on('text', (ctx) => {
  const text = ctx.message.text.toLowerCase();

  if (text.includes('—Å–∞–ª–∞–º') || text.includes('–ø—Ä–∏–≤–µ—Ç')) {
    ctx.reply('–í–∞ –∞–ª–µ–π–∫—É–º –∞—Å—Å–∞–ª–∞–º! üïå –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start –¥–ª—è –æ—Ç–∫—Ä—ã—Ç–∏—è –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é.');
  } else if (text.includes('—Å–ø–∞—Å–∏–±–æ') || text.includes('—à—É–∫—Ä–∞–Ω')) {
    ctx.reply('–ë–∞—Ä–∞–∫–∞–ª–ª–∞—Ö—É —Ñ–∏–∫–∏! ü§≤ –†–∞–¥—ã –±—ã—Ç—å –ø–æ–ª–µ–∑–Ω—ã–º–∏.');
  } else if (text.includes('–ø–æ–º–æ—â') || text.includes('help')) {
    ctx.reply('–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /help –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø—Ä–∞–≤–∫–∏ –ø–æ –∫–æ–º–∞–Ω–¥–∞–º.');
  } else {
    ctx.reply('–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start –¥–ª—è –æ—Ç–∫—Ä—ã—Ç–∏—è –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é MubarakWay! üïå');
  }
});

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫
bot.catch((err, ctx) => {
  console.error('Bot error:', err);
  ctx.reply('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É.');
});

// HTTP —Å–µ—Ä–≤–µ—Ä –¥–ª—è Render (–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –¥–ª—è web service)
const express = require('express');
const app = express();
const PORT = process.env.PORT || 3000;

// Health check endpoint
app.get('/', (req, res) => {
  res.json({
    status: 'MubarakWay Bot is running',
    timestamp: new Date().toISOString(),
    webApp: WEB_APP_URL
  });
});

app.get('/health', (req, res) => {
  res.json({ status: 'ok' });
});

// –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
const startBot = async () => {
  try {
    // –í–ê–ñ–ù–û: –°–Ω–∞—á–∞–ª–∞ –∑–∞–ø—É—Å–∫–∞–µ–º HTTP —Å–µ—Ä–≤–µ—Ä –¥–ª—è Render
    const server = app.listen(PORT, () => {
      console.log(`üåê HTTP server –∑–∞–ø—É—â–µ–Ω –Ω–∞ –ø–æ—Ä—Ç—É ${PORT}`);
      console.log('‚úÖ Render –º–æ–∂–µ—Ç –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ –±–æ—Ç—É');
    });

    // –ù–∞ –ø—Ä–æ–¥–∞–∫—à–µ–Ω–µ –∏—Å–ø–æ–ª—å–∑—É–µ–º Webhook –≤–º–µ—Å—Ç–æ Polling
    const isProduction = process.env.NODE_ENV === 'production' || process.env.RENDER;

    if (isProduction && WEB_APP_URL) {
      console.log('üîß –†–µ–∂–∏–º: Webhook (Production)');

      // –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–µ webhook –∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
      await bot.telegram.deleteWebhook({ drop_pending_updates: true });
      console.log('üßπ –°—Ç–∞—Ä—ã–π webhook —É–¥–∞–ª—ë–Ω');

      // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –Ω–æ–≤—ã–π webhook
      const webhookPath = '/webhook';
      const webhookUrl = `${WEB_APP_URL.replace('mubarak-way.onrender.com', 'mubarak-way-bot.onrender.com')}${webhookPath}`;

      app.use(bot.webhookCallback(webhookPath));

      await bot.telegram.setWebhook(webhookUrl, {
        drop_pending_updates: true,
        allowed_updates: ['message', 'callback_query']
      });

      console.log('‚úÖ Webhook —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω:', webhookUrl);
      console.log('ü§ñ MubarakWay Bot –∑–∞–ø—É—â–µ–Ω —É—Å–ø–µ—à–Ω–æ (Webhook —Ä–µ–∂–∏–º)!');
      console.log('üïå –ì–æ—Ç–æ–≤ —Å–ª—É–∂–∏—Ç—å —É–º–º–µ...');
      console.log('üì± Web App URL:', WEB_APP_URL);

    } else {
      // –í —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ –∏—Å–ø–æ–ª—å–∑—É–µ–º Polling
      console.log('üîß –†–µ–∂–∏–º: Polling (Development)');

      await bot.telegram.deleteWebhook({ drop_pending_updates: true });
      console.log('üßπ Webhook —É–¥–∞–ª—ë–Ω');

      await bot.launch({
        dropPendingUpdates: true,
        allowedUpdates: ['message', 'callback_query']
      });

      console.log('ü§ñ MubarakWay Bot –∑–∞–ø—É—â–µ–Ω —É—Å–ø–µ—à–Ω–æ (Polling —Ä–µ–∂–∏–º)!');
      console.log('üïå –ì–æ—Ç–æ–≤ —Å–ª—É–∂–∏—Ç—å —É–º–º–µ...');
    }

    // –ó–∞–ø—É—Å–∫–∞–µ–º —Å–∏—Å—Ç–µ–º—É —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –æ –≤—Ä–µ–º–µ–Ω–∏ –º–æ–ª–∏—Ç–≤
    console.log('‚è∞ –ó–∞–ø—É—Å–∫ —Å–∏—Å—Ç–µ–º—ã —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –æ –≤—Ä–µ–º–µ–Ω–∏ –º–æ–ª–∏—Ç–≤...');
    console.log(`üìä –¢–µ–∫—É—â–∏—Ö –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤: ${userSubscriptions.size}`);

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∂–¥—É—é –º–∏–Ω—É—Ç—É
    setInterval(checkPrayerTimes, 60000);
    // –ü–µ—Ä–≤–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ä–∞–∑—É
    console.log('üîÑ –í—ã–ø–æ–ª–Ω—è—é –ø–µ—Ä–≤—É—é –ø—Ä–æ–≤–µ—Ä–∫—É –≤—Ä–µ–º–µ–Ω–∏ –º–æ–ª–∏—Ç–≤...');
    await checkPrayerTimes();

    // –ó–∞–≥—Ä—É–∂–∞–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ –ø–æ–¥–ø–∏—Å–∫–∏ –∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
    loadSubscriptions();
    loadNotifiedPrayers();

    // –û—á–∏—â–∞–µ–º —Å—Ç–∞—Ä—ã–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è —Ä–∞–∑ –≤ –¥–µ–Ω—å (–≤ –ø–æ–ª–Ω–æ—á—å)
    setInterval(() => {
      const now = new Date();
      if (now.getHours() === 0 && now.getMinutes() === 0) {
        notifiedPrayers.clear();
        saveNotifiedPrayers();
        console.log('üßπ Cleared old prayer notifications');
      }
    }, 60000);

    console.log('‚úÖ –°–∏—Å—Ç–µ–º–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –æ –º–æ–ª–∏—Ç–≤–∞—Ö –∑–∞–ø—É—â–µ–Ω–∞');
    console.log('üí° –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –±—É–¥—É—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø–æ–¥–ø–∏—Å–∞–Ω—ã –ø—Ä–∏ /start');

  } catch (error) {
    console.error('üí• –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞:', error);
    console.error('Stack:', error.stack);
    // –ù–µ –≤—ã—Ö–æ–¥–∏–º –∏–∑ –ø—Ä–æ—Ü–µ—Å—Å–∞, —á—Ç–æ–±—ã HTTP —Å–µ—Ä–≤–µ—Ä –ø—Ä–æ–¥–æ–ª–∂–∞–ª —Ä–∞–±–æ—Ç–∞—Ç—å –¥–ª—è health checks
  }
};

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –ø–æ–¥–ø–∏—Å–∫–∏
function subscribeUser(userId, location = null, timezone = null) {
  userSubscriptions.set(userId, {
    userId,
    location: location || { latitude: 55.7558, longitude: 37.6173 }, // –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é –ú–æ—Å–∫–≤–∞
    timezone: timezone || 'Europe/Moscow', // –ß–∞—Å–æ–≤–æ–π –ø–æ—è—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    subscribedAt: Date.now()
  });
  console.log(`‚úÖ User ${userId} subscribed to prayer notifications (timezone: ${timezone || 'Europe/Moscow'})`);
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ä–∞—Å—á–µ—Ç–∞ –≤—Ä–µ–º–µ–Ω–∏ –º–æ–ª–∏—Ç–≤
function calculatePrayerTimes(location, date = new Date()) {
  try {
    const coordinates = new Coordinates(location.latitude, location.longitude);
    const params = CalculationMethod.MuslimWorldLeague();
    const prayerTimes = new PrayerTimes(coordinates, date, params);

    return {
      fajr: prayerTimes.fajr,
      sunrise: prayerTimes.sunrise,
      dhuhr: prayerTimes.dhuhr,
      asr: prayerTimes.asr,
      maghrib: prayerTimes.maghrib,
      isha: prayerTimes.isha
    };
  } catch (error) {
    console.error('Error calculating prayer times:', error);
    return null;
  }
}

// –ü–æ–ª—É—á–∏—Ç—å —Ç–µ–∫—É—â—É—é –∏ —Å–ª–µ–¥—É—é—â—É—é –º–æ–ª–∏—Ç–≤—É
function getCurrentAndNextPrayer(prayerTimes) {
  const now = new Date();
  const prayers = [
    { name: '–§–∞–¥–∂—Ä', time: prayerTimes.fajr, key: 'fajr' },
    { name: '–í–æ—Å—Ö–æ–¥', time: prayerTimes.sunrise, key: 'sunrise', skipNotification: true },
    { name: '–ó—É—Ö—Ä', time: prayerTimes.dhuhr, key: 'dhuhr' },
    { name: '–ê—Å—Ä', time: prayerTimes.asr, key: 'asr' },
    { name: '–ú–∞–≥—Ä–∏–±', time: prayerTimes.maghrib, key: 'maghrib' },
    { name: '–ò—à–∞', time: prayerTimes.isha, key: 'isha' }
  ];

  let currentPrayer = null;
  let nextPrayer = null;

  // –ù–∞—Ö–æ–¥–∏–º —Ç–µ–∫—É—â—É—é –∏ —Å–ª–µ–¥—É—é—â—É—é –º–æ–ª–∏—Ç–≤—É
  for (let i = 0; i < prayers.length; i++) {
    if (now < prayers[i].time) {
      nextPrayer = prayers[i];
      currentPrayer = i > 0 ? prayers[i - 1] : prayers[prayers.length - 1];
      break;
    }
  }

  // –ï—Å–ª–∏ –≤—Ä–µ–º—è –ø–æ—Å–ª–µ –ò—à–∞, —Å–ª–µ–¥—É—é—â–∞—è –º–æ–ª–∏—Ç–≤–∞ - –§–∞–¥–∂—Ä —Å–ª–µ–¥—É—é—â–µ–≥–æ –¥–Ω—è
  if (!nextPrayer) {
    currentPrayer = prayers[prayers.length - 1];
    nextPrayer = prayers[0];
  }

  return { currentPrayer, nextPrayer };
}

// –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞—Ç—å –≤—Ä–µ–º—è —Å —É—á–µ—Ç–æ–º —á–∞—Å–æ–≤–æ–≥–æ –ø–æ—è—Å–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
function formatTime(date, timezone = 'Europe/Moscow') {
  return date.toLocaleTimeString('ru-RU', {
    hour: '2-digit',
    minute: '2-digit',
    timeZone: timezone
  });
}

// –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤—Ä–µ–º–µ–Ω–∏ –º–æ–ª–∏—Ç–≤ –∏ –æ—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
async function checkPrayerTimes() {
  try {
    const now = new Date();
    console.log(`üîç Checking prayer times for ${userSubscriptions.size} subscribers at ${now.toISOString()}`);

    if (userSubscriptions.size === 0) {
      console.log('‚ö†Ô∏è No subscribers yet. Users will be subscribed when they run /start');
      return;
    }

    for (const [userId, subscription] of userSubscriptions) {
      try {
        const prayerTimes = calculatePrayerTimes(subscription.location);
        if (!prayerTimes) {
          console.warn(`‚ùå Could not calculate prayer times for user ${userId}`);
          continue;
        }

        const { currentPrayer, nextPrayer } = getCurrentAndNextPrayer(prayerTimes);
        if (!nextPrayer) {
          console.warn(`‚ùå No next prayer found for user ${userId}`);
          continue;
        }

        const timeUntilNext = nextPrayer.time - now;
        const minutesUntilNext = Math.floor(timeUntilNext / (1000 * 60));

        if (minutesUntilNext <= 15) {
          console.log(`‚è±Ô∏è User ${userId}: ${minutesUntilNext} min until ${nextPrayer.name} at ${formatTime(nextPrayer.time, subscription.timezone)}`);
        }

        // –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∑–∞ 10 –º–∏–Ω—É—Ç –¥–æ –º–æ–ª–∏—Ç–≤—ã
        if (minutesUntilNext === 10) {
          const warningKey = `${userId}_${nextPrayer.key}_10min_${nextPrayer.time.getTime()}`;
          if (!notifiedPrayers.has(warningKey) && !nextPrayer.skipNotification) {
            await bot.telegram.sendMessage(
              userId,
              `‚è∞ <b>–û—Å—Ç–∞–ª–æ—Å—å 10 –º–∏–Ω—É—Ç –¥–æ –º–æ–ª–∏—Ç–≤—ã ${nextPrayer.name}</b>\n\n` +
              `üïå –í—Ä–µ–º—è: ${formatTime(nextPrayer.time, subscription.timezone)}\n\n` +
              `–ü—Ä–∏–≥–æ—Ç–æ–≤—å—Ç–µ—Å—å –∫ –Ω–∞–º–∞–∑—É.`,
              { parse_mode: 'HTML' }
            );
            notifiedPrayers.add(warningKey);
            saveNotifiedPrayers();
            console.log(`üì¢ Sent 10-min warning to user ${userId} for ${nextPrayer.name}`);
          }
        }

        // –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø—Ä–∏ –Ω–∞—Å—Ç—É–ø–ª–µ–Ω–∏–∏ –≤—Ä–µ–º–µ–Ω–∏ –º–æ–ª–∏—Ç–≤—ã
        if (minutesUntilNext === 0) {
          const prayerKey = `${userId}_${nextPrayer.key}_now_${nextPrayer.time.getTime()}`;
          if (!notifiedPrayers.has(prayerKey) && !nextPrayer.skipNotification) {
            await bot.telegram.sendMessage(
              userId,
              `üïå <b>–ù–∞—Å—Ç—É–ø–∏–ª–æ –≤—Ä–µ–º—è –º–æ–ª–∏—Ç–≤—ã ${nextPrayer.name}</b>\n\n` +
              `üïê ${formatTime(nextPrayer.time, subscription.timezone)}\n\n` +
              `–ù–µ –æ—Ç–∫–ª–∞–¥—ã–≤–∞–π—Ç–µ –Ω–∞–º–∞–∑!`,
              { parse_mode: 'HTML' }
            );
            notifiedPrayers.add(prayerKey);
            saveNotifiedPrayers();
            console.log(`üì¢ Sent prayer notification to user ${userId} for ${nextPrayer.name}`);

            // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–ª–µ–¥—É—é—â–µ–π –º–æ–ª–∏—Ç–≤–µ —á–µ—Ä–µ–∑ 1 –º–∏–Ω—É—Ç—É
            setTimeout(async () => {
              try {
                const allPrayers = [
                  { name: '–§–∞–¥–∂—Ä', time: prayerTimes.fajr },
                  { name: '–ó—É—Ö—Ä', time: prayerTimes.dhuhr },
                  { name: '–ê—Å—Ä', time: prayerTimes.asr },
                  { name: '–ú–∞–≥—Ä–∏–±', time: prayerTimes.maghrib },
                  { name: '–ò—à–∞', time: prayerTimes.isha }
                ];

                const currentTime = new Date();
                const nextPrayerIndex = allPrayers.findIndex(p => p.time > currentTime);
                const upcomingPrayer = nextPrayerIndex >= 0 ? allPrayers[nextPrayerIndex] : allPrayers[0];

                const timeUntil = upcomingPrayer.time - currentTime;
                const hoursUntil = Math.floor(timeUntil / (1000 * 60 * 60));
                const minutesRemaining = Math.floor((timeUntil % (1000 * 60 * 60)) / (1000 * 60));

                await bot.telegram.sendMessage(
                  userId,
                  `üìø <b>–°–ª–µ–¥—É—é—â–∞—è –º–æ–ª–∏—Ç–≤–∞: ${upcomingPrayer.name}</b>\n\n` +
                  `üïê –í—Ä–µ–º—è: ${formatTime(upcomingPrayer.time, subscription.timezone)}\n` +
                  `‚è≥ –ß–µ—Ä–µ–∑: ${hoursUntil}—á ${minutesRemaining}–º`,
                  { parse_mode: 'HTML' }
                );
                console.log(`üì¢ Sent next prayer info to user ${userId}: ${upcomingPrayer.name}`);
              } catch (error) {
                console.error(`Error sending next prayer info to user ${userId}:`, error);
              }
            }, 60000); // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —á–µ—Ä–µ–∑ 1 –º–∏–Ω—É—Ç—É –ø–æ—Å–ª–µ –Ω–∞—Å—Ç—É–ø–ª–µ–Ω–∏—è –≤—Ä–µ–º–µ–Ω–∏ –º–æ–ª–∏—Ç–≤—ã
          }
        }

      } catch (error) {
        console.error(`Error sending notification to user ${userId}:`, error);
      }
    }
  } catch (error) {
    console.error('Error in checkPrayerTimes:', error);
  }
}

// Graceful stop
const gracefulShutdown = async (signal) => {
  console.log(`\nüõë –ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª ${signal}. Graceful shutdown...`);

  try {
    // –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –±–æ—Ç–∞
    await bot.stop(signal);
    console.log('‚úÖ –ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω');
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Å—Ç–∞–Ω–æ–≤–∫–µ –±–æ—Ç–∞:', error);
  }

  // –î–∞—ë–º –≤—Ä–µ–º—è –Ω–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ –≤—Å–µ—Ö –æ–ø–µ—Ä–∞—Ü–∏–π
  setTimeout(() => {
    console.log('üëã –ü—Ä–æ—Ü–µ—Å—Å –∑–∞–≤–µ—Ä—à—ë–Ω');
    process.exit(0);
  }, 1000);
};

process.once('SIGINT', () => gracefulShutdown('SIGINT'));
process.once('SIGTERM', () => gracefulShutdown('SIGTERM'));

// –û–±—Ä–∞–±–æ—Ç–∫–∞ uncaught exceptions
process.on('uncaughtException', (error) => {
  console.error('üí• Uncaught Exception:', error);
  gracefulShutdown('UNCAUGHT_EXCEPTION');
});

process.on('unhandledRejection', (reason, promise) => {
  console.error('üí• Unhandled Rejection at:', promise, 'reason:', reason);
});

startBot();