import React, { useState, useRef } from 'react';
import { Upload, X, File, Image as ImageIcon, Music, FileText, Loader2, CheckCircle2 } from 'lucide-react';
import axios from 'axios';

const API_URL = import.meta.env.VITE_API_URL || 'http://localhost:3001';
const DEBUG = import.meta.env.MODE === 'development';

// Debug logger - only logs in development mode
const debugLog = (...args) => {
  if (DEBUG) {
    console.log(...args);
  }
};

/**
 * FileUpload Component
 *
 * @param {string} category - –ö–∞—Ç–µ–≥–æ—Ä–∏—è —Ñ–∞–π–ª–∞: 'covers', 'books', 'nashids'
 * @param {string} currentUrl - –¢–µ–∫—É—â–∏–π URL —Ñ–∞–π–ª–∞ (–¥–ª—è –ø—Ä–µ–≤—å—é)
 * @param {function} onUploadSuccess - Callback –ø—Ä–∏ —É—Å–ø–µ—à–Ω–æ–π –∑–∞–≥—Ä—É–∑–∫–µ (fileUrl)
 * @param {function} onRemove - Callback –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Ñ–∞–π–ª–∞
 * @param {string} accept - MIME —Ç–∏–ø—ã —Ñ–∞–π–ª–æ–≤ (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –∑–∞–≤–∏—Å–∏—Ç –æ—Ç category)
 * @param {number} maxSize - –ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä –≤ MB (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é 100MB)
 */
const FileUpload = ({
  category = 'covers',
  currentUrl = '',
  onUploadSuccess,
  onRemove,
  accept,
  maxSize = 100,
  label = '–ó–∞–≥—Ä—É–∑–∏—Ç—å —Ñ–∞–π–ª'
}) => {
  const [uploading, setUploading] = useState(false);
  const [uploadProgress, setUploadProgress] = useState(0);
  const [error, setError] = useState('');
  const [previewUrl, setPreviewUrl] = useState(currentUrl);
  const fileInputRef = useRef(null);

  // –õ–æ–≥–∏—Ä—É–µ–º props –ø—Ä–∏ –º–æ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ –∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ category
  React.useEffect(() => {
    debugLog('üé® [FileUpload] Component mounted/updated with props:', {
      category,
      label,
      currentUrl
    });
  }, [category, label, currentUrl]);

  // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –¥–æ–ø—É—Å—Ç–∏–º—ã–µ —Ç–∏–ø—ã —Ñ–∞–π–ª–æ–≤ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
  const getAcceptTypes = () => {
    if (accept) return accept;

    switch (category) {
      case 'covers':
        return 'image/*';
      case 'books':
        return 'application/pdf';
      case 'nashids':
        return 'audio/*';
      default:
        return '*/*';
    }
  };

  // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∏–∫–æ–Ω–∫—É –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
  const getCategoryIcon = () => {
    switch (category) {
      case 'covers':
        return <ImageIcon className="w-8 h-8 text-emerald-400" />;
      case 'books':
        return <FileText className="w-8 h-8 text-emerald-400" />;
      case 'nashids':
        return <Music className="w-8 h-8 text-emerald-400" />;
      default:
        return <File className="w-8 h-8 text-emerald-400" />;
    }
  };

  // –í–∞–ª–∏–¥–∞—Ü–∏—è —Ä–∞–∑–º–µ—Ä–∞ —Ñ–∞–π–ª–∞
  const validateFileSize = (file) => {
    const fileSizeMB = file.size / (1024 * 1024);
    if (fileSizeMB > maxSize) {
      setError(`–†–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞ –Ω–µ –¥–æ–ª–∂–µ–Ω –ø—Ä–µ–≤—ã—à–∞—Ç—å ${maxSize}MB`);
      return false;
    }
    return true;
  };

  // –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ —Ñ–∞–π–ª–∞
  const handleFileSelect = async (event) => {
    const file = event.target.files[0];
    if (!file) return;

    setError('');

    // –í–∞–ª–∏–¥–∞—Ü–∏—è —Ä–∞–∑–º–µ—Ä–∞
    if (!validateFileSize(file)) {
      return;
    }

    // –°–æ–∑–¥–∞–µ–º –ø—Ä–µ–≤—å—é –¥–ª—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
    if (category === 'covers' && file.type.startsWith('image/')) {
      const reader = new FileReader();
      reader.onloadend = () => {
        setPreviewUrl(reader.result);
      };
      reader.readAsDataURL(file);
    }

    // –ó–∞–≥—Ä—É–∂–∞–µ–º —Ñ–∞–π–ª –Ω–∞ —Å–µ—Ä–≤–µ—Ä
    await uploadFile(file);
  };

  // –ó–∞–≥—Ä—É–∑–∫–∞ —Ñ–∞–π–ª–∞
  const uploadFile = async (file) => {
    debugLog('üîç [FileUpload] Starting upload with:', {
      category,
      fileName: file.name,
      fileType: file.type,
      fileSize: file.size,
      label
    });

    setUploading(true);
    setUploadProgress(0);
    setError('');

    try {
      const formData = new FormData();
      // –í–ê–ñ–ù–û: category –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –ü–ï–†–ï–î file, —á—Ç–æ–±—ã multer —É—Å–ø–µ–ª –µ–≥–æ –ø—Ä–æ—á–∏—Ç–∞—Ç—å
      formData.append('category', category);
      formData.append('file', file);

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ FormData —Å–æ–¥–µ—Ä–∂–∏—Ç
      debugLog('üì¶ [FileUpload] FormData prepared:', {
        category: formData.get('category'),
        hasFile: formData.has('file')
      });

      const token = localStorage.getItem('adminToken');

      const response = await axios.post(`${API_URL}/upload?category=${category}`, formData, {
        headers: {
          'Content-Type': 'multipart/form-data',
          'Authorization': `Bearer ${token}`
        },
        onUploadProgress: (progressEvent) => {
          const percentCompleted = Math.round((progressEvent.loaded * 100) / progressEvent.total);
          setUploadProgress(percentCompleted);
        }
      });

      if (response.data.success) {
        // –°–µ—Ä–≤–µ—Ä –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ø–æ–ª–Ω—ã–π URL, –∏—Å–ø–æ–ª—å–∑—É–µ–º –µ–≥–æ –Ω–∞–ø—Ä—è–º—É—é
        const fileUrl = response.data.file.url;
        debugLog('‚úÖ [FileUpload] File uploaded successfully:', fileUrl);
        setPreviewUrl(fileUrl);
        onUploadSuccess?.(fileUrl);
        setUploadProgress(100);
      } else {
        setError(response.data.message || '–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∞–π–ª–∞');
      }
    } catch (error) {
      console.error('Upload error:', error);
      setError(error.response?.data?.message || '–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∞–π–ª–∞');
    } finally {
      setUploading(false);
    }
  };

  // –£–¥–∞–ª–µ–Ω–∏–µ —Ñ–∞–π–ª–∞
  const handleRemove = async (e) => {
    // –ü—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–∞–µ–º –≤—Å–ø–ª—ã—Ç–∏–µ —Å–æ–±—ã—Ç–∏—è –∏ –¥–µ—Ñ–æ–ª—Ç–Ω–æ–µ –ø–æ–≤–µ–¥–µ–Ω–∏–µ
    e.preventDefault();
    e.stopPropagation();

    if (!previewUrl) return;

    debugLog('üóëÔ∏è [FileUpload] Removing file:', previewUrl);

    try {
      const token = localStorage.getItem('adminToken');

      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–ª–Ω—ã–π URL –Ω–∞ —Å–µ—Ä–≤–µ—Ä - –æ–Ω —Å–∞–º –∏–∑–≤–ª–µ—á—ë—Ç –ø—É—Ç—å
      await axios.delete(`${API_URL}/upload`, {
        headers: {
          'Authorization': `Bearer ${token}`
        },
        data: { fileUrl: previewUrl }
      });

      debugLog('‚úÖ [FileUpload] File removed successfully');

      // –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
      setPreviewUrl('');
      setUploadProgress(0);
      setError('');

      // –í—ã–∑—ã–≤–∞–µ–º callback —Ä–æ–¥–∏—Ç–µ–ª—è
      onRemove?.();

      // –°–±—Ä–∞—Å—ã–≤–∞–µ–º input
      if (fileInputRef.current) {
        fileInputRef.current.value = '';
      }
    } catch (error) {
      console.error('‚ùå [FileUpload] Delete file error:', error);
      setError('–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —Ñ–∞–π–ª–∞');
    }
  };

  // –û—Ç–∫—Ä—ã–≤–∞–µ–º –¥–∏–∞–ª–æ–≥ –≤—ã–±–æ—Ä–∞ —Ñ–∞–π–ª–∞
  const handleClick = () => {
    fileInputRef.current?.click();
  };

  return (
    <div className="space-y-3">
      <label className="block text-sm font-medium text-gray-300">
        {label}
      </label>

      {/* –ü—Ä–µ–≤—å—é –∑–∞–≥—Ä—É–∂–µ–Ω–Ω–æ–≥–æ —Ñ–∞–π–ª–∞ */}
      {previewUrl && (
        <div className="relative rounded-lg overflow-hidden bg-gray-800 border border-gray-700">
          {category === 'covers' ? (
            <div className="relative w-full h-48">
              <img
                src={previewUrl}
                alt="Preview"
                className="w-full h-full object-cover"
              />
              <button
                type="button"
                onClick={handleRemove}
                className="absolute top-2 right-2 p-1.5 bg-red-500 hover:bg-red-600 rounded-full transition-colors z-10"
                title="–£–¥–∞–ª–∏—Ç—å —Ñ–∞–π–ª"
                aria-label="–£–¥–∞–ª–∏—Ç—å —Ñ–∞–π–ª"
              >
                <X className="w-4 h-4 text-white" />
              </button>
            </div>
          ) : (
            <div className="p-4 flex items-center justify-between">
              <div className="flex items-center gap-3">
                {getCategoryIcon()}
                <div>
                  <p className="text-sm text-gray-300">–§–∞–π–ª –∑–∞–≥—Ä—É–∂–µ–Ω</p>
                  <p className="text-xs text-gray-500 mt-1">
                    {previewUrl.split('/').pop()}
                  </p>
                </div>
              </div>
              <button
                type="button"
                onClick={handleRemove}
                className="p-2 text-red-400 hover:text-red-300 transition-colors"
                title="–£–¥–∞–ª–∏—Ç—å —Ñ–∞–π–ª"
                aria-label="–£–¥–∞–ª–∏—Ç—å —Ñ–∞–π–ª"
              >
                <X className="w-5 h-5" />
              </button>
            </div>
          )}
        </div>
      )}

      {/* –ö–Ω–æ–ø–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ / –ø—Ä–æ–≥—Ä–µ—Å—Å */}
      {!previewUrl && (
        <div>
          <input
            ref={fileInputRef}
            type="file"
            accept={getAcceptTypes()}
            onChange={handleFileSelect}
            className="hidden"
          />

          <button
            type="button"
            onClick={handleClick}
            disabled={uploading}
            className="w-full px-4 py-8 border-2 border-dashed border-gray-700 rounded-lg hover:border-emerald-500 transition-colors disabled:opacity-50 disabled:cursor-not-allowed"
          >
            <div className="flex flex-col items-center gap-3">
              {uploading ? (
                <>
                  <Loader2 className="w-8 h-8 text-emerald-400 animate-spin" />
                  <p className="text-sm text-gray-400">–ó–∞–≥—Ä—É–∑–∫–∞... {uploadProgress}%</p>
                  <div className="w-full max-w-xs h-2 bg-gray-700 rounded-full overflow-hidden">
                    <div
                      className="h-full bg-emerald-500 transition-all duration-300"
                      style={{ width: `${uploadProgress}%` }}
                    />
                  </div>
                </>
              ) : (
                <>
                  <Upload className="w-8 h-8 text-gray-500" />
                  <div>
                    <p className="text-sm text-gray-400">
                      –ù–∞–∂–º–∏—Ç–µ –¥–ª—è –≤—ã–±–æ—Ä–∞ —Ñ–∞–π–ª–∞
                    </p>
                    <p className="text-xs text-gray-600 mt-1">
                      {category === 'covers' && '–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è (JPG, PNG, WebP)'}
                      {category === 'books' && 'PDF —Ñ–∞–π–ª—ã'}
                      {category === 'nashids' && '–ê—É–¥–∏–æ —Ñ–∞–π–ª—ã (MP3, WAV, OGG)'}
                      {' ‚Ä¢ '}
                      –ú–∞–∫—Å–∏–º—É–º {maxSize}MB
                    </p>
                  </div>
                </>
              )}
            </div>
          </button>
        </div>
      )}

      {/* –°–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ */}
      {error && (
        <div className="p-3 bg-red-500/10 border border-red-500/20 rounded-lg">
          <p className="text-sm text-red-400">{error}</p>
        </div>
      )}

      {/* –°–æ–æ–±—â–µ–Ω–∏–µ –æ–± —É—Å–ø–µ—Ö–µ */}
      {uploadProgress === 100 && !uploading && (
        <div className="p-3 bg-emerald-500/10 border border-emerald-500/20 rounded-lg flex items-center gap-2">
          <CheckCircle2 className="w-4 h-4 text-emerald-400" />
          <p className="text-sm text-emerald-400">–§–∞–π–ª —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω</p>
        </div>
      )}
    </div>
  );
};

export default FileUpload;
