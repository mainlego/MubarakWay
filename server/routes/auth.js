const express = require('express');
const router = express.Router();
const User = require('../models/User');

// POST /api/auth/login - –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è/–≤—Ö–æ–¥ —á–µ—Ä–µ–∑ Telegram
router.post('/login', async (req, res) => {
  try {
    const { telegramId, username, firstName, lastName, languageCode } = req.body;

    if (!telegramId) {
      return res.status(400).json({
        success: false,
        message: 'Telegram ID is required'
      });
    }

    // –ò—â–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ Telegram ID
    let user = await User.findOne({ telegramId });

    if (user) {
      // –û–±–Ω–æ–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –ø—Ä–∏ –≤—Ö–æ–¥–µ
      user.username = username || user.username;
      user.firstName = firstName || user.firstName;
      user.lastName = lastName || user.lastName;
      user.languageCode = languageCode || user.languageCode;

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏ —Å–±—Ä–∞—Å—ã–≤–∞–µ–º –º–µ—Å—è—á–Ω—ã–µ –ª–∏–º–∏—Ç—ã
      const limitsReset = user.checkAndResetMonthlyLimits();

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å –ø–æ–¥–ø–∏—Å–∫–∏
      user.checkSubscriptionStatus();

      // –û–±–Ω–æ–≤–ª—è–µ–º –≤—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–π –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
      await user.updateLastActive();

      console.log(`‚úÖ User logged in: ${telegramId} (${firstName})`);
      if (limitsReset) {
        console.log(`üîÑ Monthly limits reset for user: ${telegramId}`);
      }
    } else {
      // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
      user = new User({
        telegramId,
        username,
        firstName,
        lastName,
        languageCode: languageCode || 'ru',
        subscription: {
          tier: 'muslim',
          isActive: true,
          expiresAt: null,
          startedAt: new Date()
        },
        usage: {
          booksOffline: 0,
          booksFavorites: 0,
          nashidsOffline: 0,
          nashidsFavorites: 0,
          resetDate: new Date()
        }
      });

      await user.save();
      console.log(`üÜï New user registered: ${telegramId} (${firstName})`);
    }

    // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    res.json({
      success: true,
      user: {
        id: user._id,
        telegramId: user.telegramId,
        username: user.username,
        firstName: user.firstName,
        lastName: user.lastName,
        subscription: user.subscription,
        usage: user.usage,
        favorites: user.favorites,
        offline: user.offline,
        prayerSettings: user.prayerSettings,
        readingProgress: user.readingProgress,
        onboardingCompleted: user.onboardingCompleted
      }
    });

  } catch (error) {
    console.error('‚ùå Login error:', error);
    res.status(500).json({
      success: false,
      message: 'Server error during login',
      error: error.message
    });
  }
});

// GET /api/auth/user/:telegramId - –ü–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
router.get('/user/:telegramId', async (req, res) => {
  try {
    const { telegramId } = req.params;

    const user = await User.findOne({ telegramId });

    if (!user) {
      return res.status(404).json({
        success: false,
        message: 'User not found'
      });
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å –ø–æ–¥–ø–∏—Å–∫–∏
    user.checkSubscriptionStatus();
    await user.updateLastActive();

    res.json({
      success: true,
      user: {
        id: user._id,
        telegramId: user.telegramId,
        username: user.username,
        firstName: user.firstName,
        lastName: user.lastName,
        subscription: user.subscription,
        usage: user.usage,
        favorites: user.favorites,
        offline: user.offline,
        prayerSettings: user.prayerSettings,
        readingProgress: user.readingProgress,
        onboardingCompleted: user.onboardingCompleted
      }
    });

  } catch (error) {
    console.error('‚ùå Get user error:', error);
    res.status(500).json({
      success: false,
      message: 'Server error',
      error: error.message
    });
  }
});

// PUT /api/auth/onboarding/:telegramId - –û—Ç–º–µ—Ç–∏—Ç—å –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ –æ–Ω–±–æ—Ä–¥–∏–Ω–≥–∞
router.put('/onboarding/:telegramId', async (req, res) => {
  try {
    const { telegramId } = req.params;

    const user = await User.findOne({ telegramId });

    if (!user) {
      return res.status(404).json({
        success: false,
        message: 'User not found'
      });
    }

    user.onboardingCompleted = true;
    await user.save();

    res.json({
      success: true,
      message: 'Onboarding completed'
    });

  } catch (error) {
    console.error('‚ùå Onboarding error:', error);
    res.status(500).json({
      success: false,
      message: 'Server error',
      error: error.message
    });
  }
});

module.exports = router;
