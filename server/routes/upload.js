const express = require('express');
const router = express.Router();
const multer = require('multer');
const path = require('path');
const fs = require('fs');

// –°–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ –¥–ª—è –∑–∞–≥—Ä—É–∑–æ–∫ –µ—Å–ª–∏ –∏—Ö –Ω–µ—Ç
const uploadsDir = path.join(__dirname, '../uploads');
const categoriesDir = {
  covers: path.join(uploadsDir, 'covers'),
  books: path.join(uploadsDir, 'books'),
  nashids: path.join(uploadsDir, 'nashids')
};

Object.values(categoriesDir).forEach(dir => {
  if (!fs.existsSync(dir)) {
    fs.mkdirSync(dir, { recursive: true });
  }
});

// –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Ö—Ä–∞–Ω–∏–ª–∏—â–∞ multer
const storage = multer.diskStorage({
  destination: function (req, file, cb) {
    // –ß–∏—Ç–∞–µ–º category –∏–∑ query –ø–∞—Ä–∞–º–µ—Ç—Ä–∞ (–¥–æ—Å—Ç—É–ø–µ–Ω –≤—Å–µ–≥–¥–∞)
    const category = req.query.category || req.body.category || 'covers';
    const dir = categoriesDir[category] || categoriesDir.covers;
    cb(null, dir);
  },
  filename: function (req, file, cb) {
    // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —É–Ω–∏–∫–∞–ª—å–Ω–æ–µ –∏–º—è: timestamp-random-original.ext
    const uniqueSuffix = Date.now() + '-' + Math.round(Math.random() * 1E9);
    const ext = path.extname(file.originalname);
    const nameWithoutExt = path.basename(file.originalname, ext);
    const sanitizedName = nameWithoutExt.replace(/[^a-zA-Z0-9–∞-—è–ê-–Ø]/g, '_');
    cb(null, sanitizedName + '-' + uniqueSuffix + ext);
  }
});

// –§–∏–ª—å—Ç—Ä —Ñ–∞–π–ª–æ–≤
const fileFilter = (req, file, cb) => {
  // –ß–∏—Ç–∞–µ–º category –∏–∑ query –ø–∞—Ä–∞–º–µ—Ç—Ä–∞ (req.query –¥–æ—Å—Ç—É–ø–µ–Ω –≤—Å–µ–≥–¥–∞)
  // Fallback –Ω–∞ req.body –¥–ª—è –æ–±—Ä–∞—Ç–Ω–æ–π —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
  const category = req.query.category || req.body.category || 'covers';

  console.log('üîç FileFilter check:', {
    category,
    queryCategory: req.query.category,
    bodyCategory: req.body.category,
    mimetype: file.mimetype,
    originalname: file.originalname
  });

  if (category === 'covers') {
    // –î–ª—è –æ–±–ª–æ–∂–µ–∫ —Ç–æ–ª—å–∫–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
    if (file.mimetype.startsWith('image/')) {
      cb(null, true);
    } else {
      console.error('‚ùå FileFilter: Not an image for covers', file.mimetype);
      cb(new Error('–¢–æ–ª—å–∫–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è —Ä–∞–∑—Ä–µ—à–µ–Ω—ã –¥–ª—è –æ–±–ª–æ–∂–µ–∫'), false);
    }
  } else if (category === 'books') {
    // –î–ª—è –∫–Ω–∏–≥ —Ç–æ–ª—å–∫–æ PDF
    if (file.mimetype === 'application/pdf') {
      cb(null, true);
    } else {
      console.error('‚ùå FileFilter: Not a PDF for books', file.mimetype);
      cb(new Error('–¢–æ–ª—å–∫–æ PDF —Ñ–∞–π–ª—ã —Ä–∞–∑—Ä–µ—à–µ–Ω—ã –¥–ª—è –∫–Ω–∏–≥'), false);
    }
  } else if (category === 'nashids') {
    // –î–ª—è –Ω–∞—à–∏–¥–æ–≤ —Ç–æ–ª—å–∫–æ –∞—É–¥–∏–æ
    if (file.mimetype.startsWith('audio/')) {
      cb(null, true);
    } else {
      console.error('‚ùå FileFilter: Not audio for nashids', file.mimetype);
      cb(new Error('–¢–æ–ª—å–∫–æ –∞—É–¥–∏–æ —Ñ–∞–π–ª—ã —Ä–∞–∑—Ä–µ—à–µ–Ω—ã –¥–ª—è –Ω–∞—à–∏–¥–æ–≤'), false);
    }
  } else {
    console.error('‚ùå FileFilter: Unknown category', category);
    cb(new Error('–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–∞—Ç–µ–≥–æ—Ä–∏—è —Ñ–∞–π–ª–∞'), false);
  }
};

// –ù–∞—Å—Ç—Ä–æ–π–∫–∞ multer
const upload = multer({
  storage: storage,
  fileFilter: fileFilter,
  limits: {
    fileSize: 100 * 1024 * 1024 // 100MB –º–∞–∫—Å–∏–º—É–º
  }
});

// Middleware –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –∞–¥–º–∏–Ω–∞
const authenticateAdmin = (req, res, next) => {
  console.log('üîê Upload auth check - Headers:', req.headers.authorization?.substring(0, 50));
  const token = req.headers.authorization?.split(' ')[1];

  if (!token) {
    console.error('‚ùå Upload: No token provided');
    return res.status(401).json({
      success: false,
      message: 'Authentication required'
    });
  }

  try {
    const jwt = require('jsonwebtoken');
    const JWT_SECRET = process.env.JWT_SECRET || 'mubarakway-admin-secret-2025';
    const decoded = jwt.verify(token, JWT_SECRET);
    console.log('‚úÖ Upload: Token valid for admin:', decoded.id);
    req.admin = decoded;
    next();
  } catch (error) {
    console.error('‚ùå Upload: Invalid token -', error.message);
    return res.status(401).json({
      success: false,
      message: 'Invalid token'
    });
  }
};

// POST /api/upload - –ó–∞–≥—Ä—É–∑–∫–∞ —Ñ–∞–π–ª–∞
router.post('/', authenticateAdmin, upload.single('file'), async (req, res) => {
  console.log('üì§ Upload request received');
  console.log('üìÅ Category (query):', req.query.category);
  console.log('üìÅ Category (body):', req.body.category);
  console.log('üìÑ File:', req.file?.filename);
  console.log('üìÑ MIME type:', req.file?.mimetype);
  console.log('üìÑ Size:', req.file?.size, 'bytes');

  try {
    if (!req.file) {
      return res.status(400).json({
        success: false,
        message: 'No file uploaded'
      });
    }

    // –§–æ—Ä–º–∏—Ä—É–µ–º URL –¥–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ —Ñ–∞–π–ª—É
    const category = req.query.category || req.body.category || 'covers';
    const relativePath = `/uploads/${category}/${req.file.filename}`;

    // –§–æ—Ä–º–∏—Ä—É–µ–º –ø–æ–ª–Ω—ã–π URL (–¥–ª—è production –∏—Å–ø–æ–ª—å–∑—É–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é –æ–∫—Ä—É–∂–µ–Ω–∏—è)
    const baseUrl = process.env.BACKEND_URL || `http://localhost:${process.env.PORT || 3001}`;
    const fullUrl = `${baseUrl}${relativePath}`;

    console.log(`‚úÖ File uploaded: ${fullUrl}`);

    res.json({
      success: true,
      file: {
        filename: req.file.filename,
        originalName: req.file.originalname,
        url: fullUrl,  // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –ø–æ–ª–Ω—ã–π URL
        relativePath: relativePath,  // –¢–∞–∫–∂–µ –æ—Ç–¥–∞—ë–º –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω—ã–π –ø—É—Ç—å –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
        size: req.file.size,
        mimetype: req.file.mimetype
      }
    });

  } catch (error) {
    console.error('‚ùå Upload error:', error);
    res.status(500).json({
      success: false,
      message: 'Server error during upload',
      error: error.message
    });
  }
});

// DELETE /api/upload - –£–¥–∞–ª–µ–Ω–∏–µ —Ñ–∞–π–ª–∞
router.delete('/', authenticateAdmin, async (req, res) => {
  console.log('üóëÔ∏è Delete file request');
  console.log('üìÑ File URL:', req.body.fileUrl);

  try {
    const { fileUrl } = req.body;

    if (!fileUrl) {
      return res.status(400).json({
        success: false,
        message: 'File URL is required'
      });
    }

    // –ò–∑–≤–ª–µ–∫–∞–µ–º –ø—É—Ç—å –∫ —Ñ–∞–π–ª—É –∏–∑ URL
    // –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º –∫–∞–∫ –ø–æ–ª–Ω—ã–µ URL (https://...), —Ç–∞–∫ –∏ –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω—ã–µ (/uploads/...)
    let relativePath = fileUrl;

    if (fileUrl.startsWith('http://') || fileUrl.startsWith('https://')) {
      // –ò–∑–≤–ª–µ–∫–∞–µ–º –ø—É—Ç—å –∏–∑ –ø–æ–ª–Ω–æ–≥–æ URL
      try {
        const url = new URL(fileUrl);
        relativePath = url.pathname;
        console.log('üîó Extracted path from URL:', relativePath);
      } catch (e) {
        console.error('‚ùå Invalid URL format:', fileUrl);
        return res.status(400).json({
          success: false,
          message: 'Invalid URL format'
        });
      }
    }

    // fileUrl: /uploads/covers/filename.jpg
    const filePath = path.join(__dirname, '..', relativePath);

    console.log('üìÇ Full file path:', filePath);

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ —Ñ–∞–π–ª —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
    if (!fs.existsSync(filePath)) {
      console.log('‚ö†Ô∏è  File does not exist on disk:', filePath);
      return res.status(404).json({
        success: false,
        message: 'File not found on server'
      });
    }

    // –£–¥–∞–ª—è–µ–º —Ñ–∞–π–ª
    fs.unlinkSync(filePath);

    console.log(`‚úÖ File deleted successfully: ${relativePath}`);

    res.json({
      success: true,
      message: 'File deleted successfully'
    });

  } catch (error) {
    console.error('‚ùå Delete file error:', error);
    res.status(500).json({
      success: false,
      message: 'Server error during file deletion',
      error: error.message
    });
  }
});

module.exports = router;
