import React, { useEffect, useState } from 'react';
import { BrowserRouter as Router, Routes, Route } from 'react-router-dom';
import { Provider, useSelector, useDispatch } from 'react-redux';
import { store } from './store/store';
import { telegram } from './utils/telegram';
import { useGlobalAudio } from './hooks/useGlobalAudio';
import { loginUser, selectUser, selectIsAuthenticated } from './store/slices/authSlice';
import { setFavorites as setBooksFavorites } from './store/slices/booksSlice';
import { setFavorites as setNashidsFavorites } from './store/slices/nashidsSlice';

import Home from './pages/Home';
import Library from './pages/Library';
import Nashids from './pages/Nashids';
import Qibla from './pages/Qibla';
import Subscription from './pages/Subscription';
import Settings from './pages/Settings';
import NotificationSettings from './pages/NotificationSettings';
import EnhancedBookReader from './components/EnhancedBookReader';
import Navigation from './components/Navigation';
import TopBar from './components/TopBar';
import AudioPlayerUI from './components/AudioPlayerUI';
import ScrollToTop from './components/ScrollToTop';
import OnboardingSlides from './components/OnboardingSlides';
import TelegramLogin from './components/TelegramLogin';
import DebugPanel from './components/DebugPanel';
import LocationRequest from './components/LocationRequest';

// Admin imports
import AdminLogin from './pages/admin/AdminLogin';
import AdminDashboard from './pages/admin/AdminDashboard';
import AdminBooks from './pages/admin/AdminBooks';
import AdminNashids from './pages/admin/AdminNashids';
import AdminUsers from './pages/admin/AdminUsers';
import AdminSettings from './pages/admin/AdminSettings';
import AdminLayout from './components/AdminLayout';

function AppContent() {
  console.log('[AppContent] Component rendering...');

  const dispatch = useDispatch();
  const { currentPlaying, nashids } = useSelector(state => state.nashids);
  const user = useSelector(selectUser);
  const isAuthenticated = useSelector(selectIsAuthenticated);

  console.log('[AppContent] Current state:', { user, isAuthenticated });

  const [showPlayer, setShowPlayer] = useState(false);
  const [isPlayerMinimized, setIsPlayerMinimized] = useState(false);
  const [showOnboarding, setShowOnboarding] = useState(() => {
    return !localStorage.getItem('onboarding_completed');
  });
  const [isAuthChecking, setIsAuthChecking] = useState(true);
  const [showLocationRequest, setShowLocationRequest] = useState(false);

  // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –≥–ª–æ–±–∞–ª—å–Ω–æ–≥–æ –∞—É–¥–∏–æ (–æ–¥–∏–Ω —Ä–∞–∑ –Ω–∞ –≤–µ—Å—å App)
  const audioState = useGlobalAudio();

  console.log('[AppContent] Before useEffect, dispatch exists:', !!dispatch);

  // –§—É–Ω–∫—Ü–∏—è –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
  const loadUserData = (userData) => {
    console.log('üì• Loading user data:', userData);

    // –ó–∞–≥—Ä—É–∂–∞–µ–º –∏–∑–±—Ä–∞–Ω–Ω–æ–µ –∏–∑ MongoDB
    if (userData.favorites) {
      if (userData.favorites.books) {
        dispatch(setBooksFavorites(userData.favorites.books));
      }
      if (userData.favorites.nashids) {
        dispatch(setNashidsFavorites(userData.favorites.nashids));
      }
    }
  };

  // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
  useEffect(() => {
    console.log('[App useEffect] Effect triggered, dispatch:', !!dispatch);
    console.error('[DEBUG] useEffect IS RUNNING!');

    const initAuth = async () => {
      console.log('[App] üöÄ Starting authentication initialization...');
      console.error('[DEBUG] initAuth function called');

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º Telegram Mini App
      if (telegram.isMiniApp()) {
        telegram.init();
        console.log('[App] üîµ Telegram Mini App detected');

        const telegramUser = telegram.getUser();
        console.log('[App] üë§ Telegram user data:', telegramUser);

        if (telegramUser) {
          console.log('[App] ‚úÖ Telegram user found, calling loginUser...');

          try {
            console.log('[App] üì§ Dispatching loginUser with:', telegramUser);
            const userData = await dispatch(loginUser(telegramUser)).unwrap();
            console.log('[App] ‚úÖ Auto-login successful, user data:', userData);
            loadUserData(userData);
          } catch (error) {
            console.error('[App] ‚ùå Auto-login failed:', error);
          }
        } else {
          console.warn('[App] ‚ö†Ô∏è No Telegram user data available');
        }
        setIsAuthChecking(false);
      } else {
        console.log('[App] üåê Running in browser mode');

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—É—é –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é
        const savedAuth = localStorage.getItem('telegram_auth');
        if (savedAuth) {
          try {
            const telegramUser = JSON.parse(savedAuth);
            console.log('üîë Restoring session for user:', telegramUser.id);

            const userData = await dispatch(loginUser(telegramUser)).unwrap();
            console.log('‚úÖ Session restored:', userData);
            loadUserData(userData);
            setIsAuthChecking(false);
          } catch (error) {
            console.error('‚ùå Session restore failed:', error);
            localStorage.removeItem('telegram_auth');
            setIsAuthChecking(false);
          }
        } else {
          // –ù–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω–æ–π –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ - –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —ç–∫—Ä–∞–Ω –≤—Ö–æ–¥–∞
          setIsAuthChecking(false);
        }
      }
    };

    initAuth();
  }, []); // –ü—É—Å—Ç–æ–π –º–∞—Å—Å–∏–≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π - –≤—ã–∑–æ–≤–µ—Ç—Å—è —Ç–æ–ª—å–∫–æ –æ–¥–∏–Ω —Ä–∞–∑

  // –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è –≥–µ–æ–ª–æ–∫–∞—Ü–∏–∏ –ø–æ—Å–ª–µ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
  useEffect(() => {
    if (isAuthenticated && user && !isAuthChecking) {
      console.log('üîç Checking user location:', user.prayerSettings?.location);

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –µ—Å—Ç—å –ª–∏ –≥–µ–æ–ª–æ–∫–∞—Ü–∏—è
      const hasLocation = user.prayerSettings?.location?.latitude &&
                         user.prayerSettings?.location?.longitude;

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–µ –æ—Ç–∫–ª–æ–Ω—è–ª –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞–ø—Ä–æ—Å —Ä–∞–Ω–µ–µ
      const dismissed = localStorage.getItem('location_request_dismissed');

      if (!hasLocation && !dismissed) {
        console.log('üìç No location found, requesting...');
        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∑–∞–ø—Ä–æ—Å –≥–µ–æ–ª–æ–∫–∞—Ü–∏–∏ —á–µ—Ä–µ–∑ 1 —Å–µ–∫—É–Ω–¥—É –ø–æ—Å–ª–µ –≤—Ö–æ–¥–∞
        setTimeout(() => {
          setShowLocationRequest(true);
        }, 1000);
      } else if (hasLocation) {
        console.log('‚úÖ User has location:', user.prayerSettings.location);
      } else {
        console.log('‚è≠Ô∏è Location request was dismissed previously');
      }
    }
  }, [isAuthenticated, user, isAuthChecking]);

  useEffect(() => {
    if (currentPlaying) {
      setShowPlayer(true);
      const prevNashidId = sessionStorage.getItem('currentNashidId');
      if (prevNashidId !== String(currentPlaying.id)) {
        setIsPlayerMinimized(false);
        sessionStorage.setItem('currentNashidId', String(currentPlaying.id));
      }
    }
  }, [currentPlaying]);

  const handleClosePlayer = () => {
    setShowPlayer(false);
    setIsPlayerMinimized(false);
  };

  const handleToggleMinimize = () => {
    console.log('Toggling player minimize state from', isPlayerMinimized, 'to', !isPlayerMinimized);
    setIsPlayerMinimized(!isPlayerMinimized);
  };

  const handleOnboardingComplete = () => {
    setShowOnboarding(false);
  };

  const handleLocationSet = (location) => {
    console.log('‚úÖ Location set:', location);
    // –ú–æ–∂–Ω–æ –æ–±–Ω–æ–≤–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ store –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
  };

  const handleLocationClose = () => {
    setShowLocationRequest(false);
    // –°–æ—Ö—Ä–∞–Ω—è–µ–º —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞–∫—Ä—ã–ª –∑–∞–ø—Ä–æ—Å
    localStorage.setItem('location_request_dismissed', 'true');
  };

  // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∑–∞–≥—Ä—É–∑–∫—É –ø–æ–∫–∞ –ø—Ä–æ–≤–µ—Ä—è–µ–º –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é
  if (isAuthChecking) {
    return (
      <div className="min-h-screen flex items-center justify-center bg-gradient-to-br from-slate-900 via-emerald-900 to-teal-900">
        <div className="text-center">
          <div className="w-16 h-16 border-4 border-white/20 border-t-white rounded-full animate-spin mx-auto mb-4"></div>
          <p className="text-white text-lg">–ó–∞–≥—Ä—É–∑–∫–∞...</p>
        </div>
      </div>
    );
  }

  return (
    <div className="min-h-screen bg-gray-50">
      <ScrollToTop />
      <Routes>
        {/* Admin routes - –¥–æ—Å—Ç—É–ø–Ω—ã –≤—Å–µ–≥–¥–∞ */}
        <Route path="/admin/login" element={<AdminLogin />} />
        <Route path="/admin" element={<AdminLayout />}>
          <Route path="dashboard" element={<AdminDashboard />} />
          <Route path="books" element={<AdminBooks />} />
          <Route path="nashids" element={<AdminNashids />} />
          <Route path="users" element={<AdminUsers />} />
          <Route path="settings" element={<AdminSettings />} />
        </Route>

        {/* User routes - —Ç—Ä–µ–±—É—é—Ç –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ */}
        <Route path="/*" element={
          !telegram.isMiniApp() && !isAuthenticated ? (
            <TelegramLogin />
          ) : showOnboarding ? (
            <OnboardingSlides onComplete={handleOnboardingComplete} />
          ) : (
            <>
              <TopBar />
              <Routes>
                <Route path="/" element={<Home />} />
                <Route path="/library" element={<Library />} />
                <Route path="/book/:id" element={<EnhancedBookReader />} />
                <Route path="/nashids" element={<Nashids />} />
                <Route path="/qibla" element={<Qibla />} />
                <Route path="/subscription" element={<Subscription />} />
                <Route path="/settings" element={<Settings />} />
                <Route path="/settings/notifications" element={<NotificationSettings />} />
              </Routes>
              <Navigation />
            </>
          )
        } />
      </Routes>

      {/* –ì–ª–æ–±–∞–ª—å–Ω—ã–π –∞—É–¥–∏–æ–ø–ª–µ–µ—Ä */}
      {showPlayer && currentPlaying && (
        <AudioPlayerUI
          nashid={currentPlaying}
          playlist={nashids}
          onClose={handleClosePlayer}
          isMinimized={isPlayerMinimized}
          onToggleMinimize={handleToggleMinimize}
          audioState={audioState}
        />
      )}

      {/* Debug –ø–∞–Ω–µ–ª—å */}
      <DebugPanel />

      {/* Location Request Modal */}
      {user && (
        <LocationRequest
          isOpen={showLocationRequest}
          onClose={handleLocationClose}
          onLocationSet={handleLocationSet}
          telegramId={user.telegramId}
        />
      )}
    </div>
  );
}

function App() {
  useEffect(() => {
    window.scrollTo(0, 0);
  }, []);

  return (
    <Provider store={store}>
      <Router>
        <AppContent />
      </Router>
    </Provider>
  );
}

export default App;
